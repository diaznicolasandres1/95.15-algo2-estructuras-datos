#include "cola.h"
#include <stdio.h>
#include <stdlib.h>


typedef struct nodo{
	void* dato;
	struct nodo* nodo_siguiente;
}nodo_t;

struct cola{
	nodo_t* nodo_primero;
	nodo_t* nodo_ultimo;	
};

//FUNCIONES AUXILIARES:
nodo_t* nodo_crear(void* valor){
	nodo_t* nodo = malloc(sizeof(nodo_t));
	if(!nodo){
		return NULL;
	}
	nodo->dato = valor;
	nodo->nodo_siguiente = NULL;
	return nodo;
}
//PRIMITIVAS

// Crea una cola.
// Post: devuelve una nueva cola vacía.
cola_t* cola_crear(void){
	cola_t* cola = malloc(sizeof(cola_t));
	if(!cola){
		return NULL;
	}
	cola->nodo_primero = NULL;
	cola->nodo_ultimo = NULL;
	return cola;
}



// Devuelve verdadero o falso, según si la cola tiene o no elementos encolados.
// Pre: la cola fue creada.
bool cola_esta_vacia(const cola_t *cola){
	return(cola->nodo_primero == NULL && cola->nodo_ultimo == NULL);
}

// Agrega un nuevo elemento a la cola. Devuelve falso en caso de error.
// Pre: la cola fue creada.
// Post: se agregó un nuevo elemento a la cola, valor se encuentra al final
// de la cola.
bool cola_encolar(cola_t *cola, void* valor){
	nodo_t* nodo_nuevo = nodo_crear(valor);
	if(!nodo_nuevo){
		return false;
	}
	if(cola_esta_vacia(cola)){
		cola->nodo_primero = nodo_nuevo;
		
	}else{
		cola->nodo_ultimo->nodo_siguiente = nodo_nuevo;		
	}
	cola->nodo_ultimo = nodo_nuevo;
	return true;
}
	

// Obtiene el valor del primer elemento de la cola. Si la cola tiene
// elementos, se devuelve el valor del primero, si está vacía devuelve NULL.
// Pre: la cola fue creada.
// Post: se devolvió el primer elemento de la cola, cuando no está vacía.

void* cola_ver_primero(const cola_t *cola){
	if(cola_esta_vacia(cola)){
		return NULL;
	}
	return cola->nodo_primero->dato;
}

// Saca el primer elemento de la cola. Si la cola tiene elementos, se quita el
// primero de la cola, y se devuelve su valor, si está vacía, devuelve NULL.
// Pre: la cola fue creada.
// Post: se devolvió el valor del primer elemento anterior, la cola
// contiene un elemento menos, si la cola no estaba vacía.
void* cola_desencolar(cola_t *cola){
	if(cola_esta_vacia(cola)){
		return NULL;
	}
	if(cola->nodo_primero == cola->nodo_ultimo){
		cola->nodo_ultimo = NULL;
	}	
	nodo_t* nodo_aux = cola->nodo_primero;
	void* dato_retorno = nodo_aux->dato;
	cola->nodo_primero = nodo_aux->nodo_siguiente;
	free(nodo_aux);
	return dato_retorno;	
}

// Destruye la cola. Si se recibe la función destruir_dato por parámetro,
// para cada uno de los elementos de la cola llama a destruir_dato.
// Pre: la cola fue creada. destruir_dato es una función capaz de destruir
// los datos de la cola, o NULL en caso de que no se la utilice.
// Post: se eliminaron todos los elementos de la cola.
void cola_destruir(cola_t *cola, void destruir_dato(void*)){
	if(!cola_esta_vacia(cola)){
		nodo_t* nodo_actual= cola->nodo_primero;
		while(nodo_actual){
			if(destruir_dato){
				destruir_dato(nodo_actual->dato);
			}
			nodo_t* aux = nodo_actual;
			nodo_actual = aux->nodo_siguiente;
			free(aux);
		}
	}
	free(cola);	
}


